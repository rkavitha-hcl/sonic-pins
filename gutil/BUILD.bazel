# Copyright 2020 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

load("@com_google_googleapis_imports//:imports.bzl", "cc_proto_library")

package(
    default_visibility = ["//visibility:public"],
    licenses = ["notice"],
)

# TODO: Off-board users outside of NetInfra.
GUTIL_USER_ALLOW_LIST = [
    "//abuse/ares/storage/providers/child_safety/lrt_process:__subpackages__",
    "//ambient/a4g/platform/cloud/service/router:__subpackages__",
    "//assistant/boq/lamda/ice:__subpackages__",
    "//bigtable/anviltop/test/integration/tests:__subpackages__",
    "//blobstore2/assurance/jobs/compliance_config_manager:__subpackages__",
    "//blobstore2/assurance/jobs/compliance_config_manager/keystore:__subpackages__",
    "//cloud/vmm/subsystems/pci_passthrough/guest/public:__subpackages__",
    "//contentads/bow/modifiers/page_level_request_result:__subpackages__",
    "//contentads/bow/producers:__subpackages__",
    "//contentads/bow/rendering/preprocess/common/turtlex:__subpackages__",
    "//contentads/supermixer/logging/data_sources/shared:__subpackages__",
    "//contentads/supermixer/targeting/drx:__subpackages__",
    "//contentads/testing/globaltest/blocks/mock_web_rendering_service:__subpackages__",
    "//customer_support/content/scone/common:__subpackages__",
    "//knowledge/trust/pipelines/kelq/util:__subpackages__",
    "//learning/fairness/infra/grail/public:__subpackages__",
    "//learning/fairness/infra/grail/safety_filter:__subpackages__",
    "//learning/gnn/sampler/v2/program:__subpackages__",
    "//monitoring/monarch/config_client:__subpackages__",
    "//monitoring/raven/tools/group_table_analyzer:__subpackages__",
    "//mustang/repos_www/snippets:__subpackages__",
    "//net/hostdatapath/snic/p4nic/pipeline/programs/andromeda/tests:__subpackages__",
    "//platforms/networking/diorite/hma/testing/contract_testing:__subpackages__",
    "//platforms/networking/gpins:__subpackages__",
    "//platforms/networking/orion:__subpackages__",
    "//platforms/networking/p4:__subpackages__",
    "//platforms/networking/sandcastle/stack/testing/lib/replay:__subpackages__",
    "//quality/conceptsegmenter/data:__subpackages__",
    "//quality/local/merchant_posts/indexing:__subpackages__",
    "//storage/lightning/shared/voxel/sort:__subpackages__",
    "//superroot/boq/proactive/pandora/client/llmau:__subpackages__",
    "//superroot/impls/human_voices/serving/backends:__subpackages__",
    "//superroot/impls/human_voices/web:__subpackages__",
    "//superroot/impls/local/fulfillment/common/search_intent:__subpackages__",
    "//tech/internal/env/selector:__subpackages__",
    "//third_party/cobalt/app/evergreen/tools/release:__subpackages__",
    "//third_party/pins_infra:__subpackages__",
    "//travel/ads/content/platform/manager:__subpackages__",
    "//video/youtube/abuse/fraud/signals/udf/service/functions:__subpackages__",
    "//video/youtube/ecommerce/promo_targeting/public:__subpackages__",
    "//vision/visualsearch/server:__subpackages__",
    "//waymo/onboard/perception/alps/perspective/e2e:__subpackages__",
    "//waymo/onboard/perception/alps/radar:__subpackages__",
    "//waymo/onboard/construction_zones:__subpackages__",
    "//waymo/onboard/perception/alps/laser/obstacle_detection:__subpackages__",
    "//waymo/onboard/perception/one_model/model_inferencer:__subpackages__",
    "//wireless/android/vending/search/indexer/groot/instant:__subpackages__",
]

cc_library(
    name = "status",
    srcs = [
        "status.cc",
    ],
    hdrs = [
        "status.h",
    ],
    deps = [
        "@com_github_grpc_grpc//:grpc++",
        "@com_google_absl//absl/base:core_headers",
        "@com_google_absl//absl/status",
        "@com_google_absl//absl/status:statusor",
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/strings:cord",
        "@com_google_absl//absl/types:optional",
    ],
)

cc_library(
    name = "proto_matchers",
    testonly = True,
    hdrs = ["proto_matchers.h"],
    deps = [
        ":proto",
        "@com_github_google_glog//:glog",
        "@com_google_absl//absl/strings",
        "@com_google_googletest//:gtest",
        "@com_google_protobuf//:protobuf",
    ],
)

cc_test(
    name = "proto_matchers_test",
    srcs = ["proto_matchers_test.cc"],
    deps = [
        ":proto_matchers",
        ":proto_test_cc_proto",
        ":testing",
        "@com_google_googletest//:gtest_main",
    ],
)

cc_library(
    name = "status_matchers",
    testonly = True,
    hdrs = ["status_matchers.h"],
    deps = [
        ":status",
        "@com_google_absl//absl/status",
        "@com_google_absl//absl/status:statusor",
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/strings:str_format",
        "@com_google_googletest//:gtest",
    ],
)

cc_test(
    name = "status_matchers_test",
    srcs = ["status_matchers_test.cc"],
    deps = [
        ":status",
        ":status_matchers",
        "@com_google_absl//absl/memory",
        "@com_google_absl//absl/status",
        "@com_google_absl//absl/status:statusor",
        "@com_google_googletest//:gtest_main",
    ],
)

cc_library(
    name = "testing",
    testonly = True,
    srcs = ["testing.cc"],
    hdrs = ["testing.h"],
    deps = [
        ":proto",
        ":status",
        "@com_github_google_glog//:glog",
        "@com_google_absl//absl/status",
        "@com_google_absl//absl/strings",
    ],
)

cc_test(
    name = "testing_test",
    srcs = ["testing_test.cc"],
    deps = [
        ":testing",
        "@com_google_googletest//:gtest_main",
    ],
)

cc_library(
    name = "collections",
    hdrs = [
        "collections.h",
    ],
    deps = [
        ":status",
        "@com_github_google_glog//:glog",
        "@com_google_absl//absl/container:flat_hash_map",
        "@com_google_absl//absl/container:flat_hash_set",
        "@com_google_absl//absl/status",
        "@com_google_absl//absl/status:statusor",
        "@com_google_absl//absl/strings",
        "@com_google_protobuf//:protobuf",
    ],
)

cc_library(
    name = "proto",
    srcs = [
        "proto.cc",
    ],
    hdrs = [
        "proto.h",
    ],
    deps = [
        ":proto_string_error_collector",
        ":status",
        "@com_google_absl//absl/status",
        "@com_google_absl//absl/status:statusor",
        "@com_google_absl//absl/strings",
        "@com_google_protobuf//:protobuf",
    ],
)

cc_library(
    name = "overload",
    hdrs = ["overload.h"],
)

cc_library(
    name = "io",
    srcs = [
        "io.cc",
    ],
    hdrs = [
        "io.h",
    ],
    deps = [
        "//gutil:status",
        "@com_google_absl//absl/status",
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/strings:str_format",
    ],
)

cc_test(
    name = "io_test",
    srcs = [
        "io_test.cc",
    ],
    deps = [
        ":io",
        ":status_matchers",
        "@com_google_absl//absl/strings",
        "@com_google_googletest//:gtest_main",
    ],
)

cc_test(
    name = "collections_test",
    srcs = ["collections_test.cc"],
    deps = [
        ":collections",
        ":status_matchers",
        "@com_google_absl//absl/strings",
        "@com_google_googletest//:gtest_main",
    ],
)

cc_test(
    name = "proto_test",
    srcs = ["proto_test.cc"],
    deps = [
        ":proto",
        ":proto_matchers",
        ":proto_test_cc_proto",
        ":status",
        ":status_matchers",
        "@com_google_absl//absl/status",
        "@com_google_absl//absl/status:statusor",
        "@com_google_absl//absl/strings",
        "@com_google_googletest//:gtest_main",
    ],
)

proto_library(
    name = "proto_test_proto",
    srcs = ["proto_test.proto"],
)

proto_library(
    name = "test_artifact_writer_test_proto",
    srcs = ["test_artifact_writer_test.proto"],
)

cc_proto_library(
    name = "test_artifact_writer_test_cc_proto",
    deps = [":test_artifact_writer_test_proto"],
)

cc_proto_library(
    name = "proto_test_cc_proto",
    deps = [":proto_test_proto"],
)

cc_library(
    name = "version",
    srcs = ["version.cc"],
    hdrs = ["version.h"],
    deps = [
        ":status",
        "@com_github_google_glog//:glog",
        "@com_google_absl//absl/status:statusor",
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/strings:str_format",
        "@com_googlesource_code_re2//:re2",
    ],
)

cc_test(
    name = "version_test",
    srcs = ["version_test.cc"],
    deps = [
        ":status_matchers",
        ":version",
        "@com_google_absl//absl/status",
        "@com_google_absl//absl/status:statusor",
        "@com_google_googletest//:gtest_main",
    ],
)

cc_library(
    name = "proto_string_error_collector",
    hdrs = ["proto_string_error_collector.h"],
    deps = [
        "@com_google_absl//absl/strings",
        "@com_google_protobuf//:protobuf",
    ],
)

cc_library(
    name = "test_artifact_writer",
    testonly = True,
    srcs = ["test_artifact_writer.cc"],
    hdrs = ["test_artifact_writer.h"],
    deps = [
        ":proto",
        ":status",
        "@com_google_absl//absl/container:flat_hash_map",
        "@com_google_absl//absl/status",
        "@com_google_absl//absl/status:statusor",
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/synchronization",
        "@com_google_googletest//:gtest",
        "@com_google_protobuf//:protobuf",
    ],
)

cc_library(
    name = "proto_ordering",
    testonly = True,
    srcs = ["proto_ordering.cc"],
    hdrs = ["proto_ordering.h"],
    deps = [
        ":proto",
        "@com_google_absl//absl/algorithm:container",
        "@com_google_absl//absl/types:span",
        "@com_google_protobuf//:protobuf",
    ],
)

cc_library(
    name = "timer",
    hdrs = ["timer.h"],
    deps = ["@com_google_absl//absl/time"],
)

cc_test(
    name = "proto_ordering_test",
    srcs = ["proto_ordering_test.cc"],
    deps = [
        ":proto_matchers",
        ":proto_ordering",
        ":proto_test_cc_proto",
        ":testing",
        "@com_google_googletest//:gtest_main",
        "@com_google_protobuf//:protobuf",
    ],
)

cc_test(
    name = "test_artifact_writer_test",
    srcs = ["test_artifact_writer_test.cc"],
    deps = [
        ":status_matchers",
        ":test_artifact_writer",
        ":test_artifact_writer_test_cc_proto",
        "@com_google_googletest//:gtest_main",
	"@com_google_benchmark//:benchmark",
        "@com_google_absl//absl/strings",
    ],
)

cc_library(
    name = "syslog_sink",
    srcs = ["syslog_sink.cc"],
    hdrs = ["syslog_sink.h"],
    deps = ["@com_github_google_glog//:glog"],
)

cc_test(
    name = "timer_test",
    srcs = ["timer_test.cc"],
    deps = [
        ":timer",
        "@com_google_googletest//:gtest_main",
    ],
)
