================================================================================
TestOutcomeToFeatureMap Test
================================================================================
-- Input: PacketTestOutcome proto --------------------------------
test_run {
  test_vector {
    input {
    }
    acceptable_outputs {
      packets {
      }
      packet_ins {
      }
    }
  }
  actual_output {
  }
}
test_result {
}
-- Output: Feature Map -------------------------------------------
# expected output packets: 1
# expected punted packets: 1
# acceptable switch behaviors according to P4 simulation: 1
test result: pass

================================================================================
TestOutcomeToFeatureMap Test
================================================================================
-- Input: PacketTestOutcome proto --------------------------------
test_run {
  test_vector {
    input {
    }
    acceptable_outputs {
      packets {
      }
      packets {
      }
      packets {
      }
      packets {
      }
    }
  }
  actual_output {
  }
}
test_result {
  failure {
  }
}
-- Output: Feature Map -------------------------------------------
# expected output packets: 4
# expected punted packets: 0
# acceptable switch behaviors according to P4 simulation: 1
test result: fail

================================================================================
TestOutcomeToFeatureMap Test
================================================================================
-- Input: PacketTestOutcome proto --------------------------------
test_run {
  test_vector {
    input {
    }
    acceptable_outputs {
    }
    acceptable_outputs {
    }
    acceptable_outputs {
    }
    acceptable_outputs {
    }
    acceptable_outputs {
    }
  }
  actual_output {
  }
}
test_result {
}
-- Output: Feature Map -------------------------------------------
# expected output packets: 0
# expected punted packets: 0
# acceptable switch behaviors according to P4 simulation: 5
test result: pass

================================================================================
TestOutcomeToFeatureMap Test
================================================================================
-- Input: PacketTestOutcome proto --------------------------------
test_run {
  test_vector {
    input {
    }
    acceptable_outputs {
      packets {
      }
      packet_ins {
      }
      packet_ins {
      }
    }
    acceptable_outputs {
      packets {
      }
      packets {
      }
      packets {
      }
      packet_ins {
      }
    }
  }
  actual_output {
  }
}
test_result {
}
-- Output: Feature Map -------------------------------------------
# expected output packets: 3
# expected punted packets: 2
# acceptable switch behaviors according to P4 simulation: 2
test result: pass

================================================================================
WriteCsvFileFromPacketTestOutcomes Test
================================================================================
-- Input: PacketTestOutcomes proto -------------------------------
outcomes {
  test_run {
    test_vector {
      input {
      }
      acceptable_outputs {
        packets {
        }
        packet_ins {
        }
      }
    }
    actual_output {
    }
  }
  test_result {
  }
}
outcomes {
  test_run {
    test_vector {
      input {
      }
      acceptable_outputs {
        packets {
        }
        packets {
        }
        packets {
        }
        packets {
        }
      }
    }
    actual_output {
    }
  }
  test_result {
    failure {
    }
  }
}
outcomes {
  test_run {
    test_vector {
      input {
      }
      acceptable_outputs {
      }
      acceptable_outputs {
      }
      acceptable_outputs {
      }
      acceptable_outputs {
      }
      acceptable_outputs {
      }
    }
    actual_output {
    }
  }
  test_result {
  }
}
outcomes {
  test_run {
    test_vector {
      input {
      }
      acceptable_outputs {
        packets {
        }
        packet_ins {
        }
        packet_ins {
        }
      }
      acceptable_outputs {
        packets {
        }
        packets {
        }
        packets {
        }
        packet_ins {
        }
      }
    }
    actual_output {
    }
  }
  test_result {
  }
}
-- Output: Contents of CSV file ----------------------------------
# expected output packets,# expected punted packets,# acceptable switch behaviors according to P4 simulation,test result
1,1,1,pass
4,0,1,fail
0,0,5,pass
3,2,2,pass
================================================================================
ExtractExplanationFromModel Test
================================================================================
-- Input: RandomForestWithSingleTree  ----------------------------
? [expected(output packets) >= 1.5] # root non-leaf
|
+- T -> [fail : 0 passes, 5 fails] # multicast leaf
|
+- F -> ? [expected(packet-ins) >= 0.5] # unicast non-leaf
        |
        +- T -> [fail : 0 passes, 5 fails] # unicast w/ punt leaf
        |
        +- F -> [pass : 5 passes, 0 fails] # unicast w/o punt leaf
-- Output: DetectiveExplanation proto ----------------------
clusters {
  defining_property: "expected(output packets) >= 1.5"
  failing_tests: 5
  accuracy_of_predicted_outcome: 1
  coverage_for_predicted_outcome: 0.5
}
clusters {
  defining_property: "expected(output packets) < 1.5 && expected(packet-ins) >= 0.5"
  failing_tests: 5
  accuracy_of_predicted_outcome: 1
  coverage_for_predicted_outcome: 0.5
}
clusters {
  defining_property: "expected(output packets) < 1.5 && expected(packet-ins) < 0.5"
  predicted_outcome_is_pass: true
  passing_tests: 5
  accuracy_of_predicted_outcome: 1
  coverage_for_predicted_outcome: 1
}
================================================================================
DVaaS DetectiveExplanationToString Test
================================================================================
-- Input: DetectiveExplanation proto -----------------------------
clusters {
  defining_property: "input ttl < 2"
  predicted_outcome_is_pass: true
  passing_tests: 50
  failing_tests: 50
  accuracy_of_predicted_outcome: 0.5
  coverage_for_predicted_outcome: 1
}
-- Output: DVAAS Detective String --------------------------------
DVaaS Detective: Found the following pattern(s) among passing test vectors:
* input ttl < 2 -> pass
  * accuracy: 50%, 50 out of 100 test vectors that match the conditions pass (remaining 50 fail instead)
  * coverage: 100%, accounting for 50 out of 50 passing test vectors
* All passing test vectors accounted for

DVaaS Detective: Found the following pattern(s) among failing test vectors:
* 50 failing test vectors unaccounted for (100%)

================================================================================
DVaaS DetectiveExplanationToString Test
================================================================================
-- Input: DetectiveExplanation proto -----------------------------
clusters {
  defining_property: "input ttl < 2"
  passing_tests: 50
  failing_tests: 50
  accuracy_of_predicted_outcome: 0.5
  coverage_for_predicted_outcome: 1
}
-- Output: DVAAS Detective String --------------------------------
DVaaS Detective: Found the following pattern(s) among passing test vectors:
* 50 passing test vectors unaccounted for (100%)

DVaaS Detective: Found the following pattern(s) among failing test vectors:
* input ttl < 2 -> fail
  * accuracy: 50%, 50 out of 100 test vectors that match the conditions fail (remaining 50 pass instead)
  * coverage: 100%, accounting for 50 out of 50 failing test vectors
* All failing test vectors accounted for

================================================================================
DVaaS DetectiveExplanationToString Test
================================================================================
-- Input: DetectiveExplanation proto -----------------------------
clusters {
  defining_property: "input ttl < 2"
  predicted_outcome_is_pass: true
  passing_tests: 25
  failing_tests: 25
  accuracy_of_predicted_outcome: 0.5
  coverage_for_predicted_outcome: 0.5
}
clusters {
  defining_property: "input ttl >= 2"
  passing_tests: 25
  failing_tests: 25
  accuracy_of_predicted_outcome: 0.5
  coverage_for_predicted_outcome: 0.5
}
-- Output: DVAAS Detective String --------------------------------
DVaaS Detective: Found the following pattern(s) among passing test vectors:
* input ttl < 2 -> pass
  * accuracy: 50%, 25 out of 50 test vectors that match the conditions pass (remaining 25 fail instead)
  * coverage: 50%, accounting for 25 out of 50 passing test vectors
* 25 passing test vectors unaccounted for (50%)

DVaaS Detective: Found the following pattern(s) among failing test vectors:
* input ttl >= 2 -> fail
  * accuracy: 50%, 25 out of 50 test vectors that match the conditions fail (remaining 25 pass instead)
  * coverage: 50%, accounting for 25 out of 50 failing test vectors
* 25 failing test vectors unaccounted for (50%)

================================================================================
DVaaS DetectiveExplanationToString Test
================================================================================
-- Input: DetectiveExplanation proto -----------------------------
clusters {
  defining_property: "expected(output packets) < 2"
  predicted_outcome_is_pass: true
  passing_tests: 1220
  accuracy_of_predicted_outcome: 1
  coverage_for_predicted_outcome: 0.82
}
clusters {
  defining_property: "expected(packet-ins) < 1"
  predicted_outcome_is_pass: true
  passing_tests: 256
  accuracy_of_predicted_outcome: 1
  coverage_for_predicted_outcome: 0.17
}
clusters {
  defining_property: "expected(output packets) >= 2 && expected(packet-ins) >= 1"
  passing_tests: 12
  failing_tests: 30
  accuracy_of_predicted_outcome: 0.6
  coverage_for_predicted_outcome: 1
}
-- Output: DVAAS Detective String --------------------------------
DVaaS Detective: Found the following pattern(s) among passing test vectors:
* expected(output packets) < 2 -> pass
  * accuracy: 100%, 1220 out of 1220 test vectors that match the conditions pass (remaining 0 fail instead)
  * coverage: 82%, accounting for 1220 out of 1488 passing test vectors
* expected(packet-ins) < 1 -> pass
  * accuracy: 100%, 256 out of 256 test vectors that match the conditions pass (remaining 0 fail instead)
  * coverage: 17%, accounting for 256 out of 1488 passing test vectors
* 12 passing test vectors unaccounted for (1%)

DVaaS Detective: Found the following pattern(s) among failing test vectors:
* expected(output packets) >= 2 && expected(packet-ins) >= 1 -> fail
  * accuracy: 60%, 30 out of 42 test vectors that match the conditions fail (remaining 12 pass instead)
  * coverage: 100%, accounting for 30 out of 30 failing test vectors
* All failing test vectors accounted for

================================================================================
DVaaS Detective Explanation Test
================================================================================
-- Input: PacketTestOutcomes (concise description) ---------
No PacketTestOutcomes
-- Output: Explanation Proto -------------------------------
INVALID_ARGUMENT: No PacketTestOutcomes provided.

================================================================================
DVaaS Detective Explanation Test
================================================================================
-- Input: PacketTestOutcomes (concise description) ---------
1 passing unicast (i.e. All passing tests)
-- Output: Explanation Proto -------------------------------
clusters {
  predicted_outcome_is_pass: true
  passing_tests: 1
  accuracy_of_predicted_outcome: 1
  coverage_for_predicted_outcome: 1
}
-- Output: Explanation Pretty Print ------------------------
DVaaS Detective: Found the following pattern(s) among passing test vectors:
* <no conditions> -> pass
  * accuracy: 100%, 1 out of 1 test vectors that match the conditions pass (remaining 0 fail instead)
  * coverage: 100%, accounting for 1 out of 1 passing test vectors
* All passing test vectors accounted for

DVaaS Detective: Found the following pattern(s) among failing test vectors:
* 0 failing test vectors unaccounted for (100%)

================================================================================
DVaaS Detective Explanation Test
================================================================================
-- Input: PacketTestOutcomes (concise description) ---------
1 failing unicast (i.e. All failing tests)
-- Output: Explanation Proto -------------------------------
clusters {
  failing_tests: 1
  accuracy_of_predicted_outcome: 1
  coverage_for_predicted_outcome: 1
}
-- Output: Explanation Pretty Print ------------------------
DVaaS Detective: Found the following pattern(s) among passing test vectors:
* 0 passing test vectors unaccounted for (100%)

DVaaS Detective: Found the following pattern(s) among failing test vectors:
* <no conditions> -> fail
  * accuracy: 100%, 1 out of 1 test vectors that match the conditions fail (remaining 0 pass instead)
  * coverage: 100%, accounting for 1 out of 1 failing test vectors
* All failing test vectors accounted for

================================================================================
DVaaS Detective Explanation Test
================================================================================
-- Input: PacketTestOutcomes (concise description) ---------
1 passing unicast, 1 failing multicast
-- Output: Explanation Proto -------------------------------
clusters {
  defining_property: "# expected output packets >= 1.5"
  failing_tests: 1
  accuracy_of_predicted_outcome: 1
  coverage_for_predicted_outcome: 1
}
clusters {
  defining_property: "# expected output packets < 1.5"
  predicted_outcome_is_pass: true
  passing_tests: 1
  accuracy_of_predicted_outcome: 1
  coverage_for_predicted_outcome: 1
}
-- Output: Explanation Pretty Print ------------------------
DVaaS Detective: Found the following pattern(s) among passing test vectors:
* # expected output packets < 1.5 -> pass
  * accuracy: 100%, 1 out of 1 test vectors that match the conditions pass (remaining 0 fail instead)
  * coverage: 100%, accounting for 1 out of 1 passing test vectors
* All passing test vectors accounted for

DVaaS Detective: Found the following pattern(s) among failing test vectors:
* # expected output packets >= 1.5 -> fail
  * accuracy: 100%, 1 out of 1 test vectors that match the conditions fail (remaining 0 pass instead)
  * coverage: 100%, accounting for 1 out of 1 failing test vectors
* All failing test vectors accounted for

================================================================================
DVaaS Detective Explanation Test
================================================================================
-- Input: PacketTestOutcomes (concise description) ---------
3 passing unicast, 1 failing unicast (i.e. Identical tests pass more often than they fail)
-- Output: Explanation Proto -------------------------------
clusters {
  predicted_outcome_is_pass: true
  passing_tests: 3
  failing_tests: 1
  accuracy_of_predicted_outcome: 0.75
  coverage_for_predicted_outcome: 1
}
-- Output: Explanation Pretty Print ------------------------
DVaaS Detective: Found the following pattern(s) among passing test vectors:
* <no conditions> -> pass
  * accuracy: 75%, 3 out of 4 test vectors that match the conditions pass (remaining 1 fail instead)
  * coverage: 100%, accounting for 3 out of 3 passing test vectors
* All passing test vectors accounted for

DVaaS Detective: Found the following pattern(s) among failing test vectors:
* 1 failing test vectors unaccounted for (100%)

================================================================================
DVaaS Detective Explanation Test
================================================================================
-- Input: PacketTestOutcomes (concise description) ---------
1 passing unicast, 3 failing unicast (i.e. Identical tests fail more often than they pass)
-- Output: Explanation Proto -------------------------------
clusters {
  passing_tests: 1
  failing_tests: 3
  accuracy_of_predicted_outcome: 0.75
  coverage_for_predicted_outcome: 1
}
-- Output: Explanation Pretty Print ------------------------
DVaaS Detective: Found the following pattern(s) among passing test vectors:
* 1 passing test vectors unaccounted for (100%)

DVaaS Detective: Found the following pattern(s) among failing test vectors:
* <no conditions> -> fail
  * accuracy: 75%, 3 out of 4 test vectors that match the conditions fail (remaining 1 pass instead)
  * coverage: 100%, accounting for 3 out of 3 failing test vectors
* All failing test vectors accounted for

================================================================================
DVaaS Detective Explanation Test
================================================================================
-- Input: PacketTestOutcomes (concise description) ---------
1 passing unicast, 1 failing unicast (i.e. Identical tests 50/50 pass and fail)
-- Output: Explanation Proto -------------------------------
clusters {
  predicted_outcome_is_pass: true
  passing_tests: 1
  failing_tests: 1
  accuracy_of_predicted_outcome: 0.5
  coverage_for_predicted_outcome: 1
}
-- Output: Explanation Pretty Print ------------------------
DVaaS Detective: Found the following pattern(s) among passing test vectors:
* <no conditions> -> pass
  * accuracy: 50%, 1 out of 2 test vectors that match the conditions pass (remaining 1 fail instead)
  * coverage: 100%, accounting for 1 out of 1 passing test vectors
* All passing test vectors accounted for

DVaaS Detective: Found the following pattern(s) among failing test vectors:
* 1 failing test vectors unaccounted for (100%)

================================================================================
DVaaS Detective Explanation Test
================================================================================
-- Input: PacketTestOutcomes (concise description) ---------
1 passing unicast, 1 failing unicast+punt, 3 failing multicast (i.e. Conjunction of features determines outcome)
-- Output: Explanation Proto -------------------------------
clusters {
  defining_property: "# expected output packets >= 1.5"
  failing_tests: 3
  accuracy_of_predicted_outcome: 1
  coverage_for_predicted_outcome: 0.75
}
clusters {
  defining_property: "# expected output packets < 1.5 && # expected punted packets >= 0.5"
  failing_tests: 1
  accuracy_of_predicted_outcome: 1
  coverage_for_predicted_outcome: 0.25
}
clusters {
  defining_property: "# expected output packets < 1.5 && # expected punted packets < 0.5"
  predicted_outcome_is_pass: true
  passing_tests: 1
  accuracy_of_predicted_outcome: 1
  coverage_for_predicted_outcome: 1
}
-- Output: Explanation Pretty Print ------------------------
DVaaS Detective: Found the following pattern(s) among passing test vectors:
* # expected output packets < 1.5 && # expected punted packets < 0.5 -> pass
  * accuracy: 100%, 1 out of 1 test vectors that match the conditions pass (remaining 0 fail instead)
  * coverage: 100%, accounting for 1 out of 1 passing test vectors
* All passing test vectors accounted for

DVaaS Detective: Found the following pattern(s) among failing test vectors:
* # expected output packets >= 1.5 -> fail
  * accuracy: 100%, 3 out of 3 test vectors that match the conditions fail (remaining 0 pass instead)
  * coverage: 75%, accounting for 3 out of 4 failing test vectors
* # expected output packets < 1.5 && # expected punted packets >= 0.5 -> fail
  * accuracy: 100%, 1 out of 1 test vectors that match the conditions fail (remaining 0 pass instead)
  * coverage: 25%, accounting for 1 out of 4 failing test vectors
* All failing test vectors accounted for
